/* =======================================
		      클래스 고급
- 상속 관계에 있는 클래스들 간의 캐스팅
- 업 캐스팅, 다운 캐스팅
========================================*/

// super class, 부모 클래스, 상위 클래스
class SuperTest112
{
	public int a = 10, b = 20;

	public void write()
	{
		System.out.println("슈퍼 클래스 write() 메소드");
	}

	public int hap()
	{
		return a + b;
	}
}


// sub class, 자식 클래스, 하위 클래스
class SubTest112 extends SuperTest112
{
	public int b = 100, c = 200;

	@Override
	public int hap()
	{
		return a + b + c;
	}

	public void print()
	{
		System.out.println("서브 클래스 print() 메소드");
	}
}

// main() 메소드를 포함하는 외부의 다른 클래스
public class Test112
{
	public static void main(String[] args)
	{
		// sub class기반 인스턴스 생성
		SubTest112 ob1 = new SubTest112();
		System.out.println("ob1.b : " + ob1.b);


		// ○ 업 캐스팅
		SuperTest112 ob2 = ob1; // 『SuperTest112 ob2 = (SuperTest112)ob1;』와 동일한 코드
		// 하위 클래스 객체를 생성하지만 상위 클래스의 속성을 갖는다.

		/*
		학생 김학생 = new 학생();
		인간 사람 = 김학생;		// 『인간 사람 = (인간)김학생;』과 동일한 코드
		

		byte a = 10;
		short b = a;			// 『short b = (short)a;』과 동일한 코드
		*/

		System.out.println("ob2.b : " + ob2.b);
		// ob2.b : 20
		// 변수는 객체별로 따로 할당되므로 b는 ob2의 변수이다.
	
		System.out.println("합	: " + ob2.hap());
		// 합 : 310 
		//	hap() 메소드는 오버라이딩(Overridiing) 되어 있고
		//	ob2는 ob1을 업캐스팅한 상태의 객체이므로
		//	『SuperTest112』의 hap() 메소드를 호출하는 것이 아니라
		//	『SubTest112』에서 재정의한 hap() 메소드를 호출하게 된다.
		//	즉, 메소드는 업캐스팅이 되더라도
		//	재정의(덮어쓰기)한 이상 원래의 기능으로 되돌릴 수 없다.
	 

		ob2.write();
		// 슈퍼 클래스 write() 메소드

		// ob2.print();
		// 컴파일 에러 
		// 이미 ob2는 SuperTest112의 형식을 갖는다.
		// 애초에 SuperTest112는 print()메소드가 자식 클래스에 있는지도 모른다.

		// ○ 다운 캐스팅
		((SubTest112)ob2).print();
	//   ----------- ---
	//	  하위클래스 상위속성
	// 강제 형 변환은 되니까 + 본질은 하위 클래스 객체니까


		// ※ 추가 관찰===============================================
		// 다운 캐스팅 가능 여부
		
		SuperTest112 ob3 = new SuperTest112();
		SubTest112 ob4;

		//System.our.println(ob3.c);
		// 컴파일 에러
		// 상위 객체는 하위 객체의 멤버에 접근하는 것이 불가능하다.


		// ob4 = ob3;
		// 컴파일 에러
		// 선언만 했고 할당은 안 했다.
		// 자식 클래스 인스턴스 생성 시에는 부모 클래스의 메모리 할당은 이미 되어있지만.
		// 반대로 부모 클래스 인스턴스 생성시에는 자식 클래스 메모리할당은 안 되어있다.
		
		// ob4 = (SubTest112)ob3;
		// 컴파일 에러


		// ※ 작성된 구문의 문법적인 구조만 봤을 때 다운 캐스팅이 이루어지는 상황이다.
		//	  하지만 정상적인 캐스팅이 이루어지지 않는다.
		//    현재 SubTest112 객체에 대해 메모리 할당이 이루어지지 않은 상태이기 때문에
		//    다운 캐스팅은 불가능한 것이다.
	}
}

/*
○ 업 캐스팅, 다운 캐스팅이 정상적으로 이루어지는 경우--------------------------
	
	1. 하위 객체 생성;
	2. 상위 = 하위;			// 업 캐스팅. 정상.
	3. 하위 = 상위;			// 에러 발생
	4. 하위 = (하위)상위;	// 다운 캐스팅. 정상


○ 다운 캐스팅이 정상적으로 이루어지지 않는 경우-------------------------------------

	1. 상위 객체 생성;
	2. 하위 = 상위;			// 에러 발생
	3. 하위 = (하위)상위;	// 다운 캐스팅. 런타임 에러 발생


※ 업 캐스팅은 항상 가능. 다운 캐스팅은 경우에 따라 가능.
*/

